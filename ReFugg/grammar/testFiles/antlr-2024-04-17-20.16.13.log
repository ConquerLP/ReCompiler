2024-04-17 20:16:13:414 grammar LogManager.java:25 before: (COMBINED_GRAMMAR ReFugg (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT func) (ALT classDec) (ALT globalVar) (ALT label))) main EOF))) (RULE main (BLOCK (ALT MAIN block))) (RULE func (BLOCK (ALT FUNC fHeader fParam block))) (RULE fHeader (BLOCK (ALT returntype (* (BLOCK (ALT '[' ']'))) identifier))) (RULE fParam (BLOCK (ALT '(' (? (BLOCK (ALT argList))) ')'))) (RULE argList (BLOCK (ALT type (* (BLOCK (ALT constArray))) identifier (* (BLOCK (ALT ',' type (* (BLOCK (ALT constArray))) identifier)))))) (RULE classDec (BLOCK (ALT CLASS identifier (? (BLOCK (ALT poly))) '{' (* (BLOCK (ALT classConstructor) (ALT (BLOCK (ALT visibilty classField))) (ALT (BLOCK (ALT visibilty method))))) '}'))) (RULE poly (BLOCK (ALT ISA identifier (* (BLOCK (ALT ',' identifier)))))) (RULE visibilty (BLOCK (ALT PUBLIC) (ALT PRIVATE) (ALT PROTECTED))) (RULE classConstructor (BLOCK (ALT CONST identifier fParam block))) (RULE method (BLOCK (ALT METH fHeader fParam block))) (RULE classField (BLOCK (ALT FIELD type (* (BLOCK (ALT constArray))) identifier ';'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT stmt))) '}'))) (RULE stmt (BLOCK (ALT ifStmt) (ALT whileStmt) (ALT doWhileStmt ';') (ALT forStmt) (ALT switchCase) (ALT label) (ALT block) (ALT varDec ';') (ALT assign ';') (ALT expr ';') (ALT jumpStmt ';'))) (RULE ifStmt (BLOCK (ALT IF check block (? (BLOCK (ALT ELSE (BLOCK (ALT ifStmt) (ALT block)))))))) (RULE whileStmt (BLOCK (ALT WHILE check block))) (RULE doWhileStmt (BLOCK (ALT DO block WHILE check))) (RULE forStmt (BLOCK (ALT FOR '(' (? (BLOCK (ALT varDec) (ALT expr))) ';' (? (BLOCK (ALT expr))) ';' (? (BLOCK (ALT expr))) ')' block))) (RULE jumpStmt (BLOCK (ALT BREAK) (ALT CONTINUE) (ALT GOTO identifier) (ALT RETURN (? (BLOCK (ALT expr)))))) (RULE label (BLOCK (ALT LABEL identifier block))) (RULE switchCase (BLOCK (ALT SWITCH check '{' (+ (BLOCK (ALT caseBlock))) '}'))) (RULE caseBlock (BLOCK (ALT CASE constExpr ':' block) (ALT DEFAULT ':' block))) (RULE check (BLOCK (ALT '(' expr ')'))) (RULE varDec (BLOCK (ALT VAR type identifier (* (BLOCK (ALT constArray))) (? (BLOCK (ALT '=' expr)))))) (RULE assign (BLOCK (ALT identifier index assignOP expr) (ALT thisAccess index assignOP expr))) (RULE globalVar (BLOCK (ALT GLOBAL type identifier (* (BLOCK (ALT constArray))) ';') (ALT GLOBAL type identifier (* (BLOCK (ALT constArray))) '=' constDelc ';'))) (RULE constArray (BLOCK (ALT '[' constExpr ']') (ALT '[' ']'))) (RULE constDelc (BLOCK (ALT constExpr) (ALT constList))) (RULE constList (BLOCK (ALT '{' constExprMany '}') (ALT '{' constSubList (+ (BLOCK (ALT ',' constSubList))) '}'))) (RULE constSubList (BLOCK (ALT '{' constExprMany '}'))) (RULE constExprMany (BLOCK (ALT constExpr (* (BLOCK (ALT ',' constExpr)))))) (RULE constExpr (BLOCK (ALT constExpr or constJoin) (ALT constJoin))) (RULE constJoin (BLOCK (ALT constJoin and constEQ) (ALT constEQ))) (RULE constEQ (BLOCK (ALT constEQ eqOP constRel) (ALT constRel))) (RULE constRel (BLOCK (ALT constRel logicOp constLogic) (ALT constLogic))) (RULE constLogic (BLOCK (ALT constLogic add constTerm) (ALT constTerm))) (RULE constTerm (BLOCK (ALT constTerm mult constExpo) (ALT constExpo))) (RULE constExpo (BLOCK (ALT constExpo expoOp constUnary) (ALT constUnary))) (RULE constUnary (BLOCK (ALT notNeg constFactor) (ALT constFactor))) (RULE constFactor (BLOCK (ALT constant) (ALT '(' constExpr ')') (ALT constList))) (RULE expr (BLOCK (ALT expr or join) (ALT join))) (RULE join (BLOCK (ALT join and eq) (ALT eq))) (RULE eq (BLOCK (ALT eq eqOP rel) (ALT rel))) (RULE rel (BLOCK (ALT rel logicOp logic) (ALT logic))) (RULE logic (BLOCK (ALT logic add term) (ALT term))) (RULE term (BLOCK (ALT term mult expo) (ALT expo))) (RULE expo (BLOCK (ALT expo expoOp unary) (ALT unary))) (RULE unary (BLOCK (ALT notNeg factor) (ALT factor))) (RULE factor (BLOCK (ALT '(' expr ')') (ALT fCall) (ALT methCall) (ALT identifier (? (BLOCK (ALT postOP)))) (ALT identifier index (? (BLOCK (ALT postOP)))) (ALT create) (ALT constant) (ALT thisAccess (? (BLOCK (ALT postOP)))) (ALT list))) (RULE fCall (BLOCK (ALT identifier fArgs))) (RULE methCall (BLOCK (ALT identifier index (+ (BLOCK (ALT methCallTail)))) (ALT thisAccess (+ (BLOCK (ALT methCallTail)))))) (RULE methCallTail (BLOCK (ALT '.' fCall index))) (RULE create (BLOCK (ALT NEW identifier fArgs index (* (BLOCK (ALT methCallTail)))))) (RULE fArgs (BLOCK (ALT '(' (? (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) ')'))) (RULE index (BLOCK (ALT (* (BLOCK (ALT '[' expr ']')))))) (RULE thisAccess (BLOCK (ALT THIS (* (BLOCK (ALT '.' identifier index)))))) (RULE list (BLOCK (ALT '{' exprMany '}') (ALT '{' subList (+ (BLOCK (ALT ',' subList))) '}'))) (RULE subList (BLOCK (ALT '{' exprMany '}'))) (RULE exprMany (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) (RULE returntype (BLOCK (ALT VOID) (ALT type))) (RULE logicOp (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>='))) (RULE assignOP (BLOCK (ALT '=') (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/=') (ALT '^=') (ALT '%='))) (RULE postOP (BLOCK (ALT '++') (ALT '--'))) (RULE constant (BLOCK (ALT DOUBLE_LIT) (ALT INT_LIT) (ALT STRING_LIT) (ALT CHAR_LIT) (ALT TRUE) (ALT FALSE) (ALT THIS) (ALT NULL))) (RULE type (BLOCK (ALT 'double') (ALT 'int') (ALT 'string') (ALT 'char') (ALT 'boolean') (ALT identifier))) (RULE identifier (BLOCK (ALT ID))) (RULE MAIN (BLOCK (ALT 'main:'))) (RULE FUNC (BLOCK (ALT 'func:'))) (RULE CLASS (BLOCK (ALT 'class:'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE FIELD (BLOCK (ALT 'field:'))) (RULE VAR (BLOCK (ALT 'var:'))) (RULE GLOBAL (BLOCK (ALT 'global:'))) (RULE METH (BLOCK (ALT 'method:'))) (RULE CONST (BLOCK (ALT 'constructor:'))) (RULE ISA (BLOCK (ALT 'isa:'))) (RULE PRIVATE (BLOCK (ALT 'private:'))) (RULE PUBLIC (BLOCK (ALT 'public:'))) (RULE PROTECTED (BLOCK (ALT 'protected:'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE DO (BLOCK (ALT 'do'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE GOTO (BLOCK (ALT 'goto'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE LABEL (BLOCK (ALT 'label:'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE THIS (BLOCK (ALT 'this'))) (RULE NULL (BLOCK (ALT 'null'))) (RULE NEW (BLOCK (ALT 'new'))) (RULE or (BLOCK (ALT 'or') (ALT '||'))) (RULE and (BLOCK (ALT 'and') (ALT '&&'))) (RULE notNeg (BLOCK (ALT 'not') (ALT '!') (ALT '-'))) (RULE eqOP (BLOCK (ALT '==') (ALT 'is') (ALT '!=') (ALT 'is not'))) (RULE add (BLOCK (ALT '+') (ALT '-'))) (RULE mult (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (RULE expoOp (BLOCK (ALT '^'))) (RULE INT_LIT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DOUBLE_LIT (BLOCK (ALT INT_LIT '.' INT_LIT))) (RULE CHAR_LIT (BLOCK (ALT '\'' . '\''))) (RULE STRING_LIT (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z_0-9])))))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BIG_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\n\r\f])))) skip)))))
2024-04-17 20:16:13:442 grammar LogManager.java:25 after: (COMBINED_GRAMMAR ReFugg (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT func) (ALT classDec) (ALT globalVar) (ALT label))) main EOF))) (RULE main (BLOCK (ALT MAIN block))) (RULE func (BLOCK (ALT FUNC fHeader fParam block))) (RULE fHeader (BLOCK (ALT returntype (* (BLOCK (ALT '[' ']'))) identifier))) (RULE fParam (BLOCK (ALT '(' (? (BLOCK (ALT argList))) ')'))) (RULE argList (BLOCK (ALT type (* (BLOCK (ALT constArray))) identifier (* (BLOCK (ALT ',' type (* (BLOCK (ALT constArray))) identifier)))))) (RULE classDec (BLOCK (ALT CLASS identifier (? (BLOCK (ALT poly))) '{' (* (BLOCK (ALT classConstructor) (ALT (BLOCK (ALT visibilty classField))) (ALT (BLOCK (ALT visibilty method))))) '}'))) (RULE poly (BLOCK (ALT ISA identifier (* (BLOCK (ALT ',' identifier)))))) (RULE visibilty (BLOCK (ALT (SET PUBLIC PRIVATE PROTECTED)))) (RULE classConstructor (BLOCK (ALT CONST identifier fParam block))) (RULE method (BLOCK (ALT METH fHeader fParam block))) (RULE classField (BLOCK (ALT FIELD type (* (BLOCK (ALT constArray))) identifier ';'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT stmt))) '}'))) (RULE stmt (BLOCK (ALT ifStmt) (ALT whileStmt) (ALT doWhileStmt ';') (ALT forStmt) (ALT switchCase) (ALT label) (ALT block) (ALT varDec ';') (ALT assign ';') (ALT expr ';') (ALT jumpStmt ';'))) (RULE ifStmt (BLOCK (ALT IF check block (? (BLOCK (ALT ELSE (BLOCK (ALT ifStmt) (ALT block)))))))) (RULE whileStmt (BLOCK (ALT WHILE check block))) (RULE doWhileStmt (BLOCK (ALT DO block WHILE check))) (RULE forStmt (BLOCK (ALT FOR '(' (? (BLOCK (ALT varDec) (ALT expr))) ';' (? (BLOCK (ALT expr))) ';' (? (BLOCK (ALT expr))) ')' block))) (RULE jumpStmt (BLOCK (ALT BREAK) (ALT CONTINUE) (ALT GOTO identifier) (ALT RETURN (? (BLOCK (ALT expr)))))) (RULE label (BLOCK (ALT LABEL identifier block))) (RULE switchCase (BLOCK (ALT SWITCH check '{' (+ (BLOCK (ALT caseBlock))) '}'))) (RULE caseBlock (BLOCK (ALT CASE constExpr ':' block) (ALT DEFAULT ':' block))) (RULE check (BLOCK (ALT '(' expr ')'))) (RULE varDec (BLOCK (ALT VAR type identifier (* (BLOCK (ALT constArray))) (? (BLOCK (ALT '=' expr)))))) (RULE assign (BLOCK (ALT identifier index assignOP expr) (ALT thisAccess index assignOP expr))) (RULE globalVar (BLOCK (ALT GLOBAL type identifier (* (BLOCK (ALT constArray))) ';') (ALT GLOBAL type identifier (* (BLOCK (ALT constArray))) '=' constDelc ';'))) (RULE constArray (BLOCK (ALT '[' constExpr ']') (ALT '[' ']'))) (RULE constDelc (BLOCK (ALT constExpr) (ALT constList))) (RULE constList (BLOCK (ALT '{' constExprMany '}') (ALT '{' constSubList (+ (BLOCK (ALT ',' constSubList))) '}'))) (RULE constSubList (BLOCK (ALT '{' constExprMany '}'))) (RULE constExprMany (BLOCK (ALT constExpr (* (BLOCK (ALT ',' constExpr)))))) (RULE constExpr (BLOCK (ALT constExpr or constJoin) (ALT constJoin))) (RULE constJoin (BLOCK (ALT constJoin and constEQ) (ALT constEQ))) (RULE constEQ (BLOCK (ALT constEQ eqOP constRel) (ALT constRel))) (RULE constRel (BLOCK (ALT constRel logicOp constLogic) (ALT constLogic))) (RULE constLogic (BLOCK (ALT constLogic add constTerm) (ALT constTerm))) (RULE constTerm (BLOCK (ALT constTerm mult constExpo) (ALT constExpo))) (RULE constExpo (BLOCK (ALT constExpo expoOp constUnary) (ALT constUnary))) (RULE constUnary (BLOCK (ALT notNeg constFactor) (ALT constFactor))) (RULE constFactor (BLOCK (ALT constant) (ALT '(' constExpr ')') (ALT constList))) (RULE expr (BLOCK (ALT expr or join) (ALT join))) (RULE join (BLOCK (ALT join and eq) (ALT eq))) (RULE eq (BLOCK (ALT eq eqOP rel) (ALT rel))) (RULE rel (BLOCK (ALT rel logicOp logic) (ALT logic))) (RULE logic (BLOCK (ALT logic add term) (ALT term))) (RULE term (BLOCK (ALT term mult expo) (ALT expo))) (RULE expo (BLOCK (ALT expo expoOp unary) (ALT unary))) (RULE unary (BLOCK (ALT notNeg factor) (ALT factor))) (RULE factor (BLOCK (ALT '(' expr ')') (ALT fCall) (ALT methCall) (ALT identifier (? (BLOCK (ALT postOP)))) (ALT identifier index (? (BLOCK (ALT postOP)))) (ALT create) (ALT constant) (ALT thisAccess (? (BLOCK (ALT postOP)))) (ALT list))) (RULE fCall (BLOCK (ALT identifier fArgs))) (RULE methCall (BLOCK (ALT identifier index (+ (BLOCK (ALT methCallTail)))) (ALT thisAccess (+ (BLOCK (ALT methCallTail)))))) (RULE methCallTail (BLOCK (ALT '.' fCall index))) (RULE create (BLOCK (ALT NEW identifier fArgs index (* (BLOCK (ALT methCallTail)))))) (RULE fArgs (BLOCK (ALT '(' (? (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) ')'))) (RULE index (BLOCK (ALT (* (BLOCK (ALT '[' expr ']')))))) (RULE thisAccess (BLOCK (ALT THIS (* (BLOCK (ALT '.' identifier index)))))) (RULE list (BLOCK (ALT '{' exprMany '}') (ALT '{' subList (+ (BLOCK (ALT ',' subList))) '}'))) (RULE subList (BLOCK (ALT '{' exprMany '}'))) (RULE exprMany (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) (RULE returntype (BLOCK (ALT VOID) (ALT type))) (RULE logicOp (BLOCK (ALT (SET '<' '<=' '>' '>=')))) (RULE assignOP (BLOCK (ALT (SET '=' '+=' '-=' '*=' '/=' '^=' '%=')))) (RULE postOP (BLOCK (ALT (SET '++' '--')))) (RULE constant (BLOCK (ALT (SET DOUBLE_LIT INT_LIT STRING_LIT CHAR_LIT TRUE FALSE THIS NULL)))) (RULE type (BLOCK (ALT 'double') (ALT 'int') (ALT 'string') (ALT 'char') (ALT 'boolean') (ALT identifier))) (RULE identifier (BLOCK (ALT ID))) (RULE MAIN (BLOCK (ALT 'main:'))) (RULE FUNC (BLOCK (ALT 'func:'))) (RULE CLASS (BLOCK (ALT 'class:'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE FIELD (BLOCK (ALT 'field:'))) (RULE VAR (BLOCK (ALT 'var:'))) (RULE GLOBAL (BLOCK (ALT 'global:'))) (RULE METH (BLOCK (ALT 'method:'))) (RULE CONST (BLOCK (ALT 'constructor:'))) (RULE ISA (BLOCK (ALT 'isa:'))) (RULE PRIVATE (BLOCK (ALT 'private:'))) (RULE PUBLIC (BLOCK (ALT 'public:'))) (RULE PROTECTED (BLOCK (ALT 'protected:'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE DO (BLOCK (ALT 'do'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE GOTO (BLOCK (ALT 'goto'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE LABEL (BLOCK (ALT 'label:'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE THIS (BLOCK (ALT 'this'))) (RULE NULL (BLOCK (ALT 'null'))) (RULE NEW (BLOCK (ALT 'new'))) (RULE or (BLOCK (ALT (SET 'or' '||')))) (RULE and (BLOCK (ALT (SET 'and' '&&')))) (RULE notNeg (BLOCK (ALT (SET 'not' '!' '-')))) (RULE eqOP (BLOCK (ALT (SET '==' 'is' '!=' 'is not')))) (RULE add (BLOCK (ALT (SET '+' '-')))) (RULE mult (BLOCK (ALT (SET '*' '/' '%')))) (RULE expoOp (BLOCK (ALT '^'))) (RULE INT_LIT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DOUBLE_LIT (BLOCK (ALT INT_LIT '.' INT_LIT))) (RULE CHAR_LIT (BLOCK (ALT '\'' . '\''))) (RULE STRING_LIT (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z_0-9])))))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BIG_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\n\r\f])))) skip)))))
2024-04-17 20:16:13:470 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR ReFugg (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT func) (ALT classDec) (ALT globalVar) (ALT label))) main EOF))) (RULE main (BLOCK (ALT MAIN block))) (RULE func (BLOCK (ALT FUNC fHeader fParam block))) (RULE fHeader (BLOCK (ALT returntype (* (BLOCK (ALT '[' ']'))) identifier))) (RULE fParam (BLOCK (ALT '(' (? (BLOCK (ALT argList))) ')'))) (RULE argList (BLOCK (ALT type (* (BLOCK (ALT constArray))) identifier (* (BLOCK (ALT ',' type (* (BLOCK (ALT constArray))) identifier)))))) (RULE classDec (BLOCK (ALT CLASS identifier (? (BLOCK (ALT poly))) '{' (* (BLOCK (ALT classConstructor) (ALT (BLOCK (ALT visibilty classField))) (ALT (BLOCK (ALT visibilty method))))) '}'))) (RULE poly (BLOCK (ALT ISA identifier (* (BLOCK (ALT ',' identifier)))))) (RULE visibilty (BLOCK (ALT (SET PUBLIC PRIVATE PROTECTED)))) (RULE classConstructor (BLOCK (ALT CONST identifier fParam block))) (RULE method (BLOCK (ALT METH fHeader fParam block))) (RULE classField (BLOCK (ALT FIELD type (* (BLOCK (ALT constArray))) identifier ';'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT stmt))) '}'))) (RULE stmt (BLOCK (ALT ifStmt) (ALT whileStmt) (ALT doWhileStmt ';') (ALT forStmt) (ALT switchCase) (ALT label) (ALT block) (ALT varDec ';') (ALT assign ';') (ALT expr ';') (ALT jumpStmt ';'))) (RULE ifStmt (BLOCK (ALT IF check block (? (BLOCK (ALT ELSE (BLOCK (ALT ifStmt) (ALT block)))))))) (RULE whileStmt (BLOCK (ALT WHILE check block))) (RULE doWhileStmt (BLOCK (ALT DO block WHILE check))) (RULE forStmt (BLOCK (ALT FOR '(' (? (BLOCK (ALT varDec) (ALT expr))) ';' (? (BLOCK (ALT expr))) ';' (? (BLOCK (ALT expr))) ')' block))) (RULE jumpStmt (BLOCK (ALT BREAK) (ALT CONTINUE) (ALT GOTO identifier) (ALT RETURN (? (BLOCK (ALT expr)))))) (RULE label (BLOCK (ALT LABEL identifier block))) (RULE switchCase (BLOCK (ALT SWITCH check '{' (+ (BLOCK (ALT caseBlock))) '}'))) (RULE caseBlock (BLOCK (ALT CASE constExpr ':' block) (ALT DEFAULT ':' block))) (RULE check (BLOCK (ALT '(' expr ')'))) (RULE varDec (BLOCK (ALT VAR type identifier (* (BLOCK (ALT constArray))) (? (BLOCK (ALT '=' expr)))))) (RULE assign (BLOCK (ALT identifier index assignOP expr) (ALT thisAccess index assignOP expr))) (RULE globalVar (BLOCK (ALT GLOBAL type identifier (* (BLOCK (ALT constArray))) ';') (ALT GLOBAL type identifier (* (BLOCK (ALT constArray))) '=' constDelc ';'))) (RULE constArray (BLOCK (ALT '[' constExpr ']') (ALT '[' ']'))) (RULE constDelc (BLOCK (ALT constExpr) (ALT constList))) (RULE constList (BLOCK (ALT '{' constExprMany '}') (ALT '{' constSubList (+ (BLOCK (ALT ',' constSubList))) '}'))) (RULE constSubList (BLOCK (ALT '{' constExprMany '}'))) (RULE constExprMany (BLOCK (ALT constExpr (* (BLOCK (ALT ',' constExpr)))))) (RULE constExpr (BLOCK (ALT constExpr or constJoin) (ALT constJoin))) (RULE constJoin (BLOCK (ALT constJoin and constEQ) (ALT constEQ))) (RULE constEQ (BLOCK (ALT constEQ eqOP constRel) (ALT constRel))) (RULE constRel (BLOCK (ALT constRel logicOp constLogic) (ALT constLogic))) (RULE constLogic (BLOCK (ALT constLogic add constTerm) (ALT constTerm))) (RULE constTerm (BLOCK (ALT constTerm mult constExpo) (ALT constExpo))) (RULE constExpo (BLOCK (ALT constExpo expoOp constUnary) (ALT constUnary))) (RULE constUnary (BLOCK (ALT notNeg constFactor) (ALT constFactor))) (RULE constFactor (BLOCK (ALT constant) (ALT '(' constExpr ')') (ALT constList))) (RULE expr (BLOCK (ALT expr or join) (ALT join))) (RULE join (BLOCK (ALT join and eq) (ALT eq))) (RULE eq (BLOCK (ALT eq eqOP rel) (ALT rel))) (RULE rel (BLOCK (ALT rel logicOp logic) (ALT logic))) (RULE logic (BLOCK (ALT logic add term) (ALT term))) (RULE term (BLOCK (ALT term mult expo) (ALT expo))) (RULE expo (BLOCK (ALT expo expoOp unary) (ALT unary))) (RULE unary (BLOCK (ALT notNeg factor) (ALT factor))) (RULE factor (BLOCK (ALT '(' expr ')') (ALT fCall) (ALT methCall) (ALT identifier (? (BLOCK (ALT postOP)))) (ALT identifier index (? (BLOCK (ALT postOP)))) (ALT create) (ALT constant) (ALT thisAccess (? (BLOCK (ALT postOP)))) (ALT list))) (RULE fCall (BLOCK (ALT identifier fArgs))) (RULE methCall (BLOCK (ALT identifier index (+ (BLOCK (ALT methCallTail)))) (ALT thisAccess (+ (BLOCK (ALT methCallTail)))))) (RULE methCallTail (BLOCK (ALT '.' fCall index))) (RULE create (BLOCK (ALT NEW identifier fArgs index (* (BLOCK (ALT methCallTail)))))) (RULE fArgs (BLOCK (ALT '(' (? (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) ')'))) (RULE index (BLOCK (ALT (* (BLOCK (ALT '[' expr ']')))))) (RULE thisAccess (BLOCK (ALT THIS (* (BLOCK (ALT '.' identifier index)))))) (RULE list (BLOCK (ALT '{' exprMany '}') (ALT '{' subList (+ (BLOCK (ALT ',' subList))) '}'))) (RULE subList (BLOCK (ALT '{' exprMany '}'))) (RULE exprMany (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) (RULE returntype (BLOCK (ALT VOID) (ALT type))) (RULE logicOp (BLOCK (ALT (SET '<' '<=' '>' '>=')))) (RULE assignOP (BLOCK (ALT (SET '=' '+=' '-=' '*=' '/=' '^=' '%=')))) (RULE postOP (BLOCK (ALT (SET '++' '--')))) (RULE constant (BLOCK (ALT (SET DOUBLE_LIT INT_LIT STRING_LIT CHAR_LIT TRUE FALSE THIS NULL)))) (RULE type (BLOCK (ALT 'double') (ALT 'int') (ALT 'string') (ALT 'char') (ALT 'boolean') (ALT identifier))) (RULE identifier (BLOCK (ALT ID))) (RULE or (BLOCK (ALT (SET 'or' '||')))) (RULE and (BLOCK (ALT (SET 'and' '&&')))) (RULE notNeg (BLOCK (ALT (SET 'not' '!' '-')))) (RULE eqOP (BLOCK (ALT (SET '==' 'is' '!=' 'is not')))) (RULE add (BLOCK (ALT (SET '+' '-')))) (RULE mult (BLOCK (ALT (SET '*' '/' '%')))) (RULE expoOp (BLOCK (ALT '^')))))
2024-04-17 20:16:13:470 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR ReFuggLexer (RULES (RULE T__0 (BLOCK (ALT '['))) (RULE T__1 (BLOCK (ALT ']'))) (RULE T__2 (BLOCK (ALT '('))) (RULE T__3 (BLOCK (ALT ')'))) (RULE T__4 (BLOCK (ALT ','))) (RULE T__5 (BLOCK (ALT '{'))) (RULE T__6 (BLOCK (ALT '}'))) (RULE T__7 (BLOCK (ALT ';'))) (RULE T__8 (BLOCK (ALT ':'))) (RULE T__9 (BLOCK (ALT '='))) (RULE T__10 (BLOCK (ALT '.'))) (RULE T__11 (BLOCK (ALT '<'))) (RULE T__12 (BLOCK (ALT '<='))) (RULE T__13 (BLOCK (ALT '>'))) (RULE T__14 (BLOCK (ALT '>='))) (RULE T__15 (BLOCK (ALT '+='))) (RULE T__16 (BLOCK (ALT '-='))) (RULE T__17 (BLOCK (ALT '*='))) (RULE T__18 (BLOCK (ALT '/='))) (RULE T__19 (BLOCK (ALT '^='))) (RULE T__20 (BLOCK (ALT '%='))) (RULE T__21 (BLOCK (ALT '++'))) (RULE T__22 (BLOCK (ALT '--'))) (RULE T__23 (BLOCK (ALT 'double'))) (RULE T__24 (BLOCK (ALT 'int'))) (RULE T__25 (BLOCK (ALT 'string'))) (RULE T__26 (BLOCK (ALT 'char'))) (RULE T__27 (BLOCK (ALT 'boolean'))) (RULE T__28 (BLOCK (ALT 'or'))) (RULE T__29 (BLOCK (ALT '||'))) (RULE T__30 (BLOCK (ALT 'and'))) (RULE T__31 (BLOCK (ALT '&&'))) (RULE T__32 (BLOCK (ALT 'not'))) (RULE T__33 (BLOCK (ALT '!'))) (RULE T__34 (BLOCK (ALT '-'))) (RULE T__35 (BLOCK (ALT '=='))) (RULE T__36 (BLOCK (ALT 'is'))) (RULE T__37 (BLOCK (ALT '!='))) (RULE T__38 (BLOCK (ALT 'is not'))) (RULE T__39 (BLOCK (ALT '+'))) (RULE T__40 (BLOCK (ALT '*'))) (RULE T__41 (BLOCK (ALT '/'))) (RULE T__42 (BLOCK (ALT '%'))) (RULE T__43 (BLOCK (ALT '^'))) (RULE MAIN (BLOCK (ALT 'main:'))) (RULE FUNC (BLOCK (ALT 'func:'))) (RULE CLASS (BLOCK (ALT 'class:'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE FIELD (BLOCK (ALT 'field:'))) (RULE VAR (BLOCK (ALT 'var:'))) (RULE GLOBAL (BLOCK (ALT 'global:'))) (RULE METH (BLOCK (ALT 'method:'))) (RULE CONST (BLOCK (ALT 'constructor:'))) (RULE ISA (BLOCK (ALT 'isa:'))) (RULE PRIVATE (BLOCK (ALT 'private:'))) (RULE PUBLIC (BLOCK (ALT 'public:'))) (RULE PROTECTED (BLOCK (ALT 'protected:'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE DO (BLOCK (ALT 'do'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE GOTO (BLOCK (ALT 'goto'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE LABEL (BLOCK (ALT 'label:'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE THIS (BLOCK (ALT 'this'))) (RULE NULL (BLOCK (ALT 'null'))) (RULE NEW (BLOCK (ALT 'new'))) (RULE INT_LIT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DOUBLE_LIT (BLOCK (ALT INT_LIT '.' INT_LIT))) (RULE CHAR_LIT (BLOCK (ALT '\'' . '\''))) (RULE STRING_LIT (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z_0-9])))))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BIG_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\n\r\f])))) skip)))))
2024-04-17 20:16:13:661 left-recursion LogManager.java:25 constExpr
    :   ( {} constJoin<tokenIndex=718> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> or<tokenIndex=712> constJoin<tokenIndex=714>
        )*
    ;
2024-04-17 20:16:13:664 grammar LogManager.java:25 added: (RULE constExpr (BLOCK (ALT (BLOCK (ALT {} (constJoin (ELEMENT_OPTIONS (= tokenIndex 718))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (or (ELEMENT_OPTIONS (= tokenIndex 712))) (constJoin (ELEMENT_OPTIONS (= tokenIndex 714)))))))))
2024-04-17 20:16:13:666 left-recursion LogManager.java:25 constJoin
    :   ( {} constEQ<tokenIndex=733> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> and<tokenIndex=727> constEQ<tokenIndex=729>
        )*
    ;
2024-04-17 20:16:13:667 grammar LogManager.java:25 added: (RULE constJoin (BLOCK (ALT (BLOCK (ALT {} (constEQ (ELEMENT_OPTIONS (= tokenIndex 733))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (and (ELEMENT_OPTIONS (= tokenIndex 727))) (constEQ (ELEMENT_OPTIONS (= tokenIndex 729)))))))))
2024-04-17 20:16:13:669 left-recursion LogManager.java:25 constEQ
    :   ( {} constRel<tokenIndex=748> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> eqOP<tokenIndex=742> constRel<tokenIndex=744>
        )*
    ;
2024-04-17 20:16:13:669 grammar LogManager.java:25 added: (RULE constEQ (BLOCK (ALT (BLOCK (ALT {} (constRel (ELEMENT_OPTIONS (= tokenIndex 748))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (eqOP (ELEMENT_OPTIONS (= tokenIndex 742))) (constRel (ELEMENT_OPTIONS (= tokenIndex 744)))))))))
2024-04-17 20:16:13:671 left-recursion LogManager.java:25 constRel
    :   ( {} constLogic<tokenIndex=763> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> logicOp<tokenIndex=757> constLogic<tokenIndex=759>
        )*
    ;
2024-04-17 20:16:13:671 grammar LogManager.java:25 added: (RULE constRel (BLOCK (ALT (BLOCK (ALT {} (constLogic (ELEMENT_OPTIONS (= tokenIndex 763))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (logicOp (ELEMENT_OPTIONS (= tokenIndex 757))) (constLogic (ELEMENT_OPTIONS (= tokenIndex 759)))))))))
2024-04-17 20:16:13:673 left-recursion LogManager.java:25 constLogic
    :   ( {} constTerm<tokenIndex=778> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> add<tokenIndex=772> constTerm<tokenIndex=774>
        )*
    ;
2024-04-17 20:16:13:674 grammar LogManager.java:25 added: (RULE constLogic (BLOCK (ALT (BLOCK (ALT {} (constTerm (ELEMENT_OPTIONS (= tokenIndex 778))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (add (ELEMENT_OPTIONS (= tokenIndex 772))) (constTerm (ELEMENT_OPTIONS (= tokenIndex 774)))))))))
2024-04-17 20:16:13:676 left-recursion LogManager.java:25 constTerm
    :   ( {} constExpo<tokenIndex=793> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> mult<tokenIndex=787> constExpo<tokenIndex=789>
        )*
    ;
2024-04-17 20:16:13:676 grammar LogManager.java:25 added: (RULE constTerm (BLOCK (ALT (BLOCK (ALT {} (constExpo (ELEMENT_OPTIONS (= tokenIndex 793))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (mult (ELEMENT_OPTIONS (= tokenIndex 787))) (constExpo (ELEMENT_OPTIONS (= tokenIndex 789)))))))))
2024-04-17 20:16:13:677 left-recursion LogManager.java:25 constExpo
    :   ( {} constUnary<tokenIndex=808> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> expoOp<tokenIndex=802> constUnary<tokenIndex=804>
        )*
    ;
2024-04-17 20:16:13:678 grammar LogManager.java:25 added: (RULE constExpo (BLOCK (ALT (BLOCK (ALT {} (constUnary (ELEMENT_OPTIONS (= tokenIndex 808))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (expoOp (ELEMENT_OPTIONS (= tokenIndex 802))) (constUnary (ELEMENT_OPTIONS (= tokenIndex 804)))))))))
2024-04-17 20:16:13:679 left-recursion LogManager.java:25 expr
    :   ( {} join<tokenIndex=868> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> or<tokenIndex=862> join<tokenIndex=864>
        )*
    ;
2024-04-17 20:16:13:681 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (join (ELEMENT_OPTIONS (= tokenIndex 868))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (or (ELEMENT_OPTIONS (= tokenIndex 862))) (join (ELEMENT_OPTIONS (= tokenIndex 864)))))))))
2024-04-17 20:16:13:682 left-recursion LogManager.java:25 join
    :   ( {} eq<tokenIndex=883> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> and<tokenIndex=877> eq<tokenIndex=879>
        )*
    ;
2024-04-17 20:16:13:683 grammar LogManager.java:25 added: (RULE join (BLOCK (ALT (BLOCK (ALT {} (eq (ELEMENT_OPTIONS (= tokenIndex 883))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (and (ELEMENT_OPTIONS (= tokenIndex 877))) (eq (ELEMENT_OPTIONS (= tokenIndex 879)))))))))
2024-04-17 20:16:13:684 left-recursion LogManager.java:25 eq
    :   ( {} rel<tokenIndex=898> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> eqOP<tokenIndex=892> rel<tokenIndex=894>
        )*
    ;
2024-04-17 20:16:13:685 grammar LogManager.java:25 added: (RULE eq (BLOCK (ALT (BLOCK (ALT {} (rel (ELEMENT_OPTIONS (= tokenIndex 898))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (eqOP (ELEMENT_OPTIONS (= tokenIndex 892))) (rel (ELEMENT_OPTIONS (= tokenIndex 894)))))))))
2024-04-17 20:16:13:687 left-recursion LogManager.java:25 rel
    :   ( {} logic<tokenIndex=913> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> logicOp<tokenIndex=907> logic<tokenIndex=909>
        )*
    ;
2024-04-17 20:16:13:688 grammar LogManager.java:25 added: (RULE rel (BLOCK (ALT (BLOCK (ALT {} (logic (ELEMENT_OPTIONS (= tokenIndex 913))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (logicOp (ELEMENT_OPTIONS (= tokenIndex 907))) (logic (ELEMENT_OPTIONS (= tokenIndex 909)))))))))
2024-04-17 20:16:13:689 left-recursion LogManager.java:25 logic
    :   ( {} term<tokenIndex=928> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> add<tokenIndex=922> term<tokenIndex=924>
        )*
    ;
2024-04-17 20:16:13:689 grammar LogManager.java:25 added: (RULE logic (BLOCK (ALT (BLOCK (ALT {} (term (ELEMENT_OPTIONS (= tokenIndex 928))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (add (ELEMENT_OPTIONS (= tokenIndex 922))) (term (ELEMENT_OPTIONS (= tokenIndex 924)))))))))
2024-04-17 20:16:13:691 left-recursion LogManager.java:25 term
    :   ( {} expo<tokenIndex=943> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> mult<tokenIndex=937> expo<tokenIndex=939>
        )*
    ;
2024-04-17 20:16:13:692 grammar LogManager.java:25 added: (RULE term (BLOCK (ALT (BLOCK (ALT {} (expo (ELEMENT_OPTIONS (= tokenIndex 943))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (mult (ELEMENT_OPTIONS (= tokenIndex 937))) (expo (ELEMENT_OPTIONS (= tokenIndex 939)))))))))
2024-04-17 20:16:13:693 left-recursion LogManager.java:25 expo
    :   ( {} unary<tokenIndex=958> 
        )
        (
          {precpred(_ctx, 2)}?<p=2> expoOp<tokenIndex=952> unary<tokenIndex=954>
        )*
    ;
2024-04-17 20:16:13:693 grammar LogManager.java:25 added: (RULE expo (BLOCK (ALT (BLOCK (ALT {} (unary (ELEMENT_OPTIONS (= tokenIndex 958))))) (* (BLOCK (ALT ({precpred(_ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (expoOp (ELEMENT_OPTIONS (= tokenIndex 952))) (unary (ELEMENT_OPTIONS (= tokenIndex 954)))))))))
2024-04-17 20:16:13:695 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, MAIN=45, FUNC=46, CLASS=47, VOID=48, FIELD=49, VAR=50, GLOBAL=51, METH=52, CONST=53, ISA=54, PRIVATE=55, PUBLIC=56, PROTECTED=57, IF=58, ELSE=59, WHILE=60, DO=61, FOR=62, CONTINUE=63, BREAK=64, GOTO=65, RETURN=66, LABEL=67, SWITCH=68, CASE=69, DEFAULT=70, TRUE=71, FALSE=72, THIS=73, NULL=74, NEW=75, INT_LIT=76, DOUBLE_LIT=77, CHAR_LIT=78, STRING_LIT=79, ID=80, COMMENT=81, BIG_COMMENT=82, WS=83}
2024-04-17 20:16:13:695 semantics LogManager.java:25 strings={'['=1, ']'=2, '('=3, ')'=4, ','=5, '{'=6, '}'=7, ';'=8, ':'=9, '='=10, '.'=11, '<'=12, '<='=13, '>'=14, '>='=15, '+='=16, '-='=17, '*='=18, '/='=19, '^='=20, '%='=21, '++'=22, '--'=23, 'double'=24, 'int'=25, 'string'=26, 'char'=27, 'boolean'=28, 'or'=29, '||'=30, 'and'=31, '&&'=32, 'not'=33, '!'=34, '-'=35, '=='=36, 'is'=37, '!='=38, 'is not'=39, '+'=40, '*'=41, '/'=42, '%'=43, '^'=44, 'main:'=45, 'func:'=46, 'class:'=47, 'void'=48, 'field:'=49, 'var:'=50, 'global:'=51, 'method:'=52, 'constructor:'=53, 'isa:'=54, 'private:'=55, 'public:'=56, 'protected:'=57, 'if'=58, 'else'=59, 'while'=60, 'do'=61, 'for'=62, 'continue'=63, 'break'=64, 'goto'=65, 'return'=66, 'label:'=67, 'switch'=68, 'case'=69, 'default'=70, 'true'=71, 'false'=72, 'this'=73, 'null'=74, 'new'=75}
2024-04-17 20:16:13:711 LL1 LogManager.java:25 
DECISION 0 in rule program
2024-04-17 20:16:13:711 LL1 LogManager.java:25 look=[46, 47, 51, 67]
2024-04-17 20:16:13:711 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:711 LL1 LogManager.java:25 
DECISION 1 in rule program
2024-04-17 20:16:13:712 LL1 LogManager.java:25 look=[{46..47, 51, 67}, 45]
2024-04-17 20:16:13:712 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:712 LL1 LogManager.java:25 
DECISION 2 in rule fHeader
2024-04-17 20:16:13:712 LL1 LogManager.java:25 look=[1, 80]
2024-04-17 20:16:13:712 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:712 LL1 LogManager.java:25 
DECISION 3 in rule fParam
2024-04-17 20:16:13:712 LL1 LogManager.java:25 look=[{24..28, 80}, 4]
2024-04-17 20:16:13:712 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:712 LL1 LogManager.java:25 
DECISION 4 in rule argList
2024-04-17 20:16:13:712 LL1 LogManager.java:25 look=[1, 80]
2024-04-17 20:16:13:712 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:712 LL1 LogManager.java:25 
DECISION 5 in rule argList
2024-04-17 20:16:13:712 LL1 LogManager.java:25 look=[1, 80]
2024-04-17 20:16:13:712 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:712 LL1 LogManager.java:25 
DECISION 6 in rule argList
2024-04-17 20:16:13:712 LL1 LogManager.java:25 look=[5, 4]
2024-04-17 20:16:13:712 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:712 LL1 LogManager.java:25 
DECISION 7 in rule classDec
2024-04-17 20:16:13:712 LL1 LogManager.java:25 look=[54, 6]
2024-04-17 20:16:13:712 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:712 LL1 LogManager.java:25 
DECISION 8 in rule classDec
2024-04-17 20:16:13:712 LL1 LogManager.java:25 look=[53, {55..57}, {55..57}]
2024-04-17 20:16:13:712 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:712 LL1 LogManager.java:25 
DECISION 9 in rule classDec
2024-04-17 20:16:13:712 LL1 LogManager.java:25 look=[{53, 55..57}, 7]
2024-04-17 20:16:13:712 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:712 LL1 LogManager.java:25 
DECISION 10 in rule poly
2024-04-17 20:16:13:712 LL1 LogManager.java:25 look=[5, 6]
2024-04-17 20:16:13:713 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:713 LL1 LogManager.java:25 
DECISION 11 in rule classField
2024-04-17 20:16:13:713 LL1 LogManager.java:25 look=[1, 80]
2024-04-17 20:16:13:713 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:713 LL1 LogManager.java:25 
DECISION 12 in rule block
2024-04-17 20:16:13:713 LL1 LogManager.java:25 look=[{3, 6, 33..35, 50, 58, 60..68, 71..80}, 7]
2024-04-17 20:16:13:713 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:713 LL1 LogManager.java:25 
DECISION 13 in rule stmt
2024-04-17 20:16:13:713 LL1 LogManager.java:25 look=[58, 60, 61, 62, 68, 67, 6, 50, {73, 80}, {3, 6, 33..35, 71..80}, {63..66}]
2024-04-17 20:16:13:713 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:713 LL1 LogManager.java:25 
DECISION 14 in rule ifStmt
2024-04-17 20:16:13:713 LL1 LogManager.java:25 look=[58, 6]
2024-04-17 20:16:13:713 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:713 LL1 LogManager.java:25 
DECISION 15 in rule ifStmt
2024-04-17 20:16:13:714 LL1 LogManager.java:25 look=[59, {3, 6..7, 33..35, 50, 58, 60..68, 71..80}]
2024-04-17 20:16:13:714 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:714 LL1 LogManager.java:25 
DECISION 16 in rule forStmt
2024-04-17 20:16:13:714 LL1 LogManager.java:25 look=[50, {3, 6, 33..35, 71..80}, 8]
2024-04-17 20:16:13:714 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:714 LL1 LogManager.java:25 
DECISION 17 in rule forStmt
2024-04-17 20:16:13:714 LL1 LogManager.java:25 look=[{3, 6, 33..35, 71..80}, 8]
2024-04-17 20:16:13:714 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:714 LL1 LogManager.java:25 
DECISION 18 in rule forStmt
2024-04-17 20:16:13:714 LL1 LogManager.java:25 look=[{3, 6, 33..35, 71..80}, 4]
2024-04-17 20:16:13:714 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:714 LL1 LogManager.java:25 
DECISION 19 in rule jumpStmt
2024-04-17 20:16:13:714 LL1 LogManager.java:25 look=[{3, 6, 33..35, 71..80}, 8]
2024-04-17 20:16:13:714 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:714 LL1 LogManager.java:25 
DECISION 20 in rule jumpStmt
2024-04-17 20:16:13:714 LL1 LogManager.java:25 look=[64, 63, 65, 66]
2024-04-17 20:16:13:714 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:714 LL1 LogManager.java:25 
DECISION 21 in rule switchCase
2024-04-17 20:16:13:714 LL1 LogManager.java:25 look=[{69..70}, 7]
2024-04-17 20:16:13:714 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:714 LL1 LogManager.java:25 
DECISION 22 in rule caseBlock
2024-04-17 20:16:13:714 LL1 LogManager.java:25 look=[69, 70]
2024-04-17 20:16:13:714 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:714 LL1 LogManager.java:25 
DECISION 23 in rule varDec
2024-04-17 20:16:13:714 LL1 LogManager.java:25 look=[1, {8, 10}]
2024-04-17 20:16:13:714 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:714 LL1 LogManager.java:25 
DECISION 24 in rule varDec
2024-04-17 20:16:13:715 LL1 LogManager.java:25 look=[10, 8]
2024-04-17 20:16:13:715 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:715 LL1 LogManager.java:25 
DECISION 25 in rule assign
2024-04-17 20:16:13:715 LL1 LogManager.java:25 look=[80, 73]
2024-04-17 20:16:13:715 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:715 LL1 LogManager.java:25 
DECISION 26 in rule globalVar
2024-04-17 20:16:13:715 LL1 LogManager.java:25 look=[1, 8]
2024-04-17 20:16:13:715 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:715 LL1 LogManager.java:25 
DECISION 27 in rule globalVar
2024-04-17 20:16:13:715 LL1 LogManager.java:25 look=[1, 10]
2024-04-17 20:16:13:715 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:715 LL1 LogManager.java:25 
DECISION 28 in rule globalVar
2024-04-17 20:16:13:715 LL1 LogManager.java:25 look=[51, 51]
2024-04-17 20:16:13:715 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:715 LL1 LogManager.java:25 
DECISION 29 in rule constArray
2024-04-17 20:16:13:715 LL1 LogManager.java:25 look=[1, 1]
2024-04-17 20:16:13:715 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:715 LL1 LogManager.java:25 
DECISION 30 in rule constDelc
2024-04-17 20:16:13:715 LL1 LogManager.java:25 look=[{3, 6, 33..35, 71..74, 76..79}, 6]
2024-04-17 20:16:13:715 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:715 LL1 LogManager.java:25 
DECISION 31 in rule constList
2024-04-17 20:16:13:715 LL1 LogManager.java:25 look=[5, 7]
2024-04-17 20:16:13:715 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:715 LL1 LogManager.java:25 
DECISION 32 in rule constList
2024-04-17 20:16:13:715 LL1 LogManager.java:25 look=[6, 6]
2024-04-17 20:16:13:715 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:715 LL1 LogManager.java:25 
DECISION 33 in rule constExprMany
2024-04-17 20:16:13:715 LL1 LogManager.java:25 look=[5, 7]
2024-04-17 20:16:13:715 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:716 LL1 LogManager.java:25 
DECISION 34 in rule constExpr
2024-04-17 20:16:13:716 LL1 LogManager.java:25 look=[null, {2, 4..5, 7..9}]
2024-04-17 20:16:13:716 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:716 LL1 LogManager.java:25 
DECISION 35 in rule constJoin
2024-04-17 20:16:13:716 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:716 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:716 LL1 LogManager.java:25 
DECISION 36 in rule constEQ
2024-04-17 20:16:13:716 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:716 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:716 LL1 LogManager.java:25 
DECISION 37 in rule constRel
2024-04-17 20:16:13:716 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:716 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:716 LL1 LogManager.java:25 
DECISION 38 in rule constLogic
2024-04-17 20:16:13:716 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:716 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:716 LL1 LogManager.java:25 
DECISION 39 in rule constTerm
2024-04-17 20:16:13:716 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:716 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:716 LL1 LogManager.java:25 
DECISION 40 in rule constExpo
2024-04-17 20:16:13:716 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:716 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:716 LL1 LogManager.java:25 
DECISION 41 in rule constUnary
2024-04-17 20:16:13:716 LL1 LogManager.java:25 look=[{33..35}, {3, 6, 71..74, 76..79}]
2024-04-17 20:16:13:717 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:717 LL1 LogManager.java:25 
DECISION 42 in rule constFactor
2024-04-17 20:16:13:717 LL1 LogManager.java:25 look=[{71..74, 76..79}, 3, 6]
2024-04-17 20:16:13:717 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:717 LL1 LogManager.java:25 
DECISION 43 in rule expr
2024-04-17 20:16:13:717 LL1 LogManager.java:25 look=[null, {2, 4..5, 7..8}]
2024-04-17 20:16:13:717 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:717 LL1 LogManager.java:25 
DECISION 44 in rule join
2024-04-17 20:16:13:717 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:717 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:717 LL1 LogManager.java:25 
DECISION 45 in rule eq
2024-04-17 20:16:13:717 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:717 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:717 LL1 LogManager.java:25 
DECISION 46 in rule rel
2024-04-17 20:16:13:717 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:717 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:717 LL1 LogManager.java:25 
DECISION 47 in rule logic
2024-04-17 20:16:13:717 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:717 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:717 LL1 LogManager.java:25 
DECISION 48 in rule term
2024-04-17 20:16:13:717 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:717 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:717 LL1 LogManager.java:25 
DECISION 49 in rule expo
2024-04-17 20:16:13:718 LL1 LogManager.java:25 look=[null, null]
2024-04-17 20:16:13:718 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:718 LL1 LogManager.java:25 
DECISION 50 in rule unary
2024-04-17 20:16:13:718 LL1 LogManager.java:25 look=[{33..35}, {3, 6, 71..80}]
2024-04-17 20:16:13:718 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:718 LL1 LogManager.java:25 
DECISION 51 in rule factor
2024-04-17 20:16:13:718 LL1 LogManager.java:25 look=[{22..23}, null]
2024-04-17 20:16:13:718 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:718 LL1 LogManager.java:25 
DECISION 52 in rule factor
2024-04-17 20:16:13:718 LL1 LogManager.java:25 look=[{22..23}, null]
2024-04-17 20:16:13:718 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:718 LL1 LogManager.java:25 
DECISION 53 in rule factor
2024-04-17 20:16:13:718 LL1 LogManager.java:25 look=[{22..23}, null]
2024-04-17 20:16:13:718 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:718 LL1 LogManager.java:25 
DECISION 54 in rule factor
2024-04-17 20:16:13:718 LL1 LogManager.java:25 look=[3, 80, {73, 80}, 80, 80, 75, {71..74, 76..79}, 73, 6]
2024-04-17 20:16:13:718 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:718 LL1 LogManager.java:25 
DECISION 55 in rule methCall
2024-04-17 20:16:13:718 LL1 LogManager.java:25 look=[11, null]
2024-04-17 20:16:13:718 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:718 LL1 LogManager.java:25 
DECISION 56 in rule methCall
2024-04-17 20:16:13:718 LL1 LogManager.java:25 look=[11, null]
2024-04-17 20:16:13:718 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:718 LL1 LogManager.java:25 
DECISION 57 in rule methCall
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[80, 73]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:719 LL1 LogManager.java:25 
DECISION 58 in rule create
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[11, null]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:719 LL1 LogManager.java:25 
DECISION 59 in rule fArgs
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[5, 4]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:719 LL1 LogManager.java:25 
DECISION 60 in rule fArgs
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[{3, 6, 33..35, 71..80}, 4]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:719 LL1 LogManager.java:25 
DECISION 61 in rule index
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[1, null]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:719 LL1 LogManager.java:25 
DECISION 62 in rule thisAccess
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[11, null]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:719 LL1 LogManager.java:25 
DECISION 63 in rule list
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[5, 7]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:719 LL1 LogManager.java:25 
DECISION 64 in rule list
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[6, 6]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? false
2024-04-17 20:16:13:719 LL1 LogManager.java:25 
DECISION 65 in rule exprMany
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[5, 7]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:719 LL1 LogManager.java:25 
DECISION 66 in rule returntype
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[48, {24..28, 80}]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:719 LL1 LogManager.java:25 
DECISION 67 in rule type
2024-04-17 20:16:13:719 LL1 LogManager.java:25 look=[24, 25, 26, 27, 28, 80]
2024-04-17 20:16:13:719 LL1 LogManager.java:25 LL(1)? true
2024-04-17 20:16:13:748 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:749 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:751 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:751 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:751 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:751 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:752 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:752 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:752 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:752 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:753 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:753 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:753 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:753 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:753 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:754 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:754 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:754 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:754 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:754 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:755 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:755 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:756 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:756 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:756 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:756 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:756 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:757 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:757 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:757 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:757 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:757 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:757 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:758 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:758 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:758 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:758 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:758 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:758 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:759 action-translator LogManager.java:25 translate 
2024-04-17 20:16:13:759 action-translator LogManager.java:25 translate precpred(_ctx, 2)
2024-04-17 20:16:13:759 action-translator LogManager.java:25 translate precpred(_ctx, 2)
